// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by ffigen. See flutter_libepiccash/ffigen.yaml

import 'dart:ffi' as ffi;

/// Bindings for epic_cash_wallet C API.
class EpicCashWalletBindings {
  EpicCashWalletBindings(this._library);
  final ffi.DynamicLibrary _library;

  // wallet_init
  late final _wallet_initPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>>("wallet_init");
  late final _wallet_init = _wallet_initPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> wallet_init(
    ffi.Pointer<ffi.Char> config,
    ffi.Pointer<ffi.Char> mnemonic,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> name,
  ) => _wallet_init(config, mnemonic, password, name);

  // get_mnemonic
  late final _get_mnemonicPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>("get_mnemonic");
  late final _get_mnemonic =
      _get_mnemonicPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
  ffi.Pointer<ffi.Char> get_mnemonic() => _get_mnemonic();

  // rust_open_wallet
  late final _rust_open_walletPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>("rust_open_wallet");
  late final _rust_open_wallet = _rust_open_walletPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_open_wallet(
          ffi.Pointer<ffi.Char> config, ffi.Pointer<ffi.Char> password) =>
      _rust_open_wallet(config, password);

  // rust_wallet_balances
  late final _rust_wallet_balancesPtr = _library.lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>("rust_wallet_balances")
      as ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>;
  late final _rust_wallet_balances = _rust_wallet_balancesPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_wallet_balances(
          ffi.Pointer<ffi.Char> wallet,
          ffi.Pointer<ffi.Char> refresh,
          ffi.Pointer<ffi.Char> min_confirmations) =>
      _rust_wallet_balances(wallet, refresh, min_confirmations);

  // rust_recover_from_mnemonic
  late final _rust_recover_from_mnemonicPtr = _library.lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>("rust_recover_from_mnemonic")
      as ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>;
  late final _rust_recover_from_mnemonic =
      _rust_recover_from_mnemonicPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_recover_from_mnemonic(
          ffi.Pointer<ffi.Char> config,
          ffi.Pointer<ffi.Char> password,
          ffi.Pointer<ffi.Char> mnemonic,
          ffi.Pointer<ffi.Char> name) =>
      _rust_recover_from_mnemonic(config, password, mnemonic, name);

  // rust_wallet_scan_outputs
  late final _rust_wallet_scan_outputsPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>>("rust_wallet_scan_outputs");
  late final _rust_wallet_scan_outputs = _rust_wallet_scan_outputsPtr
      .asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_wallet_scan_outputs(
          ffi.Pointer<ffi.Char> wallet,
          ffi.Pointer<ffi.Char> start_height,
          ffi.Pointer<ffi.Char> number_of_blocks) =>
      _rust_wallet_scan_outputs(wallet, start_height, number_of_blocks);

  // rust_create_tx
  late final _rust_create_txPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>>("rust_create_tx");
  late final _rust_create_tx = _rust_create_txPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_create_tx(
          ffi.Pointer<ffi.Char> wallet,
          ffi.Pointer<ffi.Char> amount,
          ffi.Pointer<ffi.Char> to_address,
          ffi.Pointer<ffi.Char> secret_key_index,
          ffi.Pointer<ffi.Char> epicbox_config,
          ffi.Pointer<ffi.Char> confirmations,
          ffi.Pointer<ffi.Char> note) =>
      _rust_create_tx(wallet, amount, to_address, secret_key_index,
          epicbox_config, confirmations, note);

  // rust_txs_get
  late final _rust_txs_getPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>("rust_txs_get");
  late final _rust_txs_get = _rust_txs_getPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_txs_get(
          ffi.Pointer<ffi.Char> wallet, ffi.Pointer<ffi.Char> refresh_from_node) =>
      _rust_txs_get(wallet, refresh_from_node);

  // rust_tx_cancel
  late final _rust_tx_cancelPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>("rust_tx_cancel");
  late final _rust_tx_cancel = _rust_tx_cancelPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_tx_cancel(
          ffi.Pointer<ffi.Char> wallet, ffi.Pointer<ffi.Char> tx_id) =>
      _rust_tx_cancel(wallet, tx_id);

  // rust_get_chain_height
  late final _rust_get_chain_heightPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>)>>("rust_get_chain_height");
  late final _rust_get_chain_height = _rust_get_chain_heightPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_get_chain_height(ffi.Pointer<ffi.Char> config) =>
      _rust_get_chain_height(config);

  // rust_delete_wallet
  late final _rust_delete_walletPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>("rust_delete_wallet");
  late final _rust_delete_wallet = _rust_delete_walletPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_delete_wallet(
          ffi.Pointer<ffi.Char> wallet, ffi.Pointer<ffi.Char> config) =>
      _rust_delete_wallet(wallet, config);

  // rust_tx_send_http
  late final _rust_tx_send_httpPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>>("rust_tx_send_http");
  late final _rust_tx_send_http = _rust_tx_send_httpPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_tx_send_http(
          ffi.Pointer<ffi.Char> wallet,
          ffi.Pointer<ffi.Char> selection_strategy_is_use_all,
          ffi.Pointer<ffi.Char> minimum_confirmations,
          ffi.Pointer<ffi.Char> message,
          ffi.Pointer<ffi.Char> amount,
          ffi.Pointer<ffi.Char> address) =>
      _rust_tx_send_http(wallet, selection_strategy_is_use_all,
          minimum_confirmations, message, amount, address);

  // rust_get_wallet_address
  late final _rust_get_wallet_addressPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>>("rust_get_wallet_address");
  late final _rust_get_wallet_address = _rust_get_wallet_addressPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_get_wallet_address(
          ffi.Pointer<ffi.Char> wallet,
          ffi.Pointer<ffi.Char> index,
          ffi.Pointer<ffi.Char> epicbox_config) =>
      _rust_get_wallet_address(wallet, index, epicbox_config);

  // rust_validate_address
  late final _rust_validate_addressPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>)>>("rust_validate_address");
  late final _rust_validate_address = _rust_validate_addressPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_validate_address(ffi.Pointer<ffi.Char> address) =>
      _rust_validate_address(address);

  // rust_get_tx_fees
  late final _rust_get_tx_feesPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>>("rust_get_tx_fees");
  late final _rust_get_tx_fees = _rust_get_tx_feesPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Char> rust_get_tx_fees(
          ffi.Pointer<ffi.Char> wallet,
          ffi.Pointer<ffi.Char> c_amount,
          ffi.Pointer<ffi.Char> min_confirmations) =>
      _rust_get_tx_fees(wallet, c_amount, min_confirmations);

  // rust_epicbox_listener_start
  late final _rust_epicbox_listener_startPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>("rust_epicbox_listener_start");
  late final _rust_epicbox_listener_start =
      _rust_epicbox_listener_startPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();
  ffi.Pointer<ffi.Void> rust_epicbox_listener_start(
          ffi.Pointer<ffi.Char> wallet, ffi.Pointer<ffi.Char> epicbox_config) =>
      _rust_epicbox_listener_start(wallet, epicbox_config);

  // _listener_cancel
  late final _listener_cancelPtr = _library.lookup<
      ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>)>>("_listener_cancel");
  late final _listener_cancel = _listener_cancelPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();
  ffi.Pointer<ffi.Char> listener_cancel(ffi.Pointer<ffi.Void> handler) =>
      _listener_cancel(handler);
}

